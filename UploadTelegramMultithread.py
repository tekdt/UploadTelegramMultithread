import os
import gc
import hashlib
import json
import sys
import asyncio
import aiofiles
from pathlib import Path
from telegram import Bot
from telegram.error import TelegramError, NetworkError
import httpx
from httpx import TimeoutException as TimedOut
import threading
import io
from PyQt6.QtWidgets import (
    QApplication, QTabWidget, QWidget, QVBoxLayout, QPushButton, QTextEdit,
    QFileDialog, QLabel, QLineEdit, QProgressBar, QSpinBox
)
from PyQt6.QtCore import QThread, pyqtSignal
from telegram.request import HTTPXRequest
from PyQt6.QtGui import QIcon

# C·∫•u h√¨nh
CONFIG_FILE = "config.json"
version = "23/04/2025"
released_date = "1.2.2"

# Qu·∫£n l√Ω event loop trong lu·ªìng n·ªÅn
class AsyncExecutor:
    def __init__(self):
        self.loop = asyncio.new_event_loop()
        self.thread = threading.Thread(target=self.run_loop, daemon=True)
        self.thread.start()

    def run_loop(self):
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()

    def run_async(self, coro):
        return asyncio.run_coroutine_threadsafe(coro, self.loop).result()

    def shutdown(self):
        def stop_loop():
            try:
                # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c t√°c v·ª• ƒëang ch·∫°y, tr·ª´ t√°c v·ª• hi·ªán t·∫°i
                tasks = [t for t in asyncio.all_tasks(self.loop) if t is not asyncio.current_task()]
                # H·ªßy t·∫•t c·∫£ c√°c t√°c v·ª•
                for task in tasks:
                    task.cancel()
                # Ch·ªù c√°c t√°c v·ª• ho√†n th√†nh ho·∫∑c b·ªã h·ªßy, b·ªè qua l·ªói n·∫øu c√≥
                self.loop.run_until_complete(asyncio.gather(*tasks, return_exceptions=True))
                # ƒê√≥ng c√°c async generator (n·∫øu c√≥)
                self.loop.run_until_complete(self.loop.shutdown_asyncgens())
                # ƒê√≥ng event loop
                self.loop.close()
            except Exception as e:
                print(f"L·ªói khi shutdown loop: {e}")

        # G·ªçi h√†m stop_loop qua lu·ªìng an to√†n
        self.loop.call_soon_threadsafe(stop_loop)
        self.thread.join(timeout=5.0)  # Ch·ªù t·ªëi ƒëa 5 gi√¢y

# T√≠nh to√°n MD5
def calculate_md5(file_path):
    hash_md5 = hashlib.md5()
    try:
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
    except FileNotFoundError:
        return None
    return hash_md5.hexdigest().strip()

# Thao t√°c v·ªõi file config b·∫•t ƒë·ªìng b·ªô
async def save_config(token, user_id, selected_directory=None, thread_count=None):
    try:
        config = await load_config()
        config.update({"token": token, "user_id": user_id})
        if selected_directory is not None:
            config["selected_directory"] = selected_directory
        if thread_count is not None:
            config["thread_count"] = thread_count
        async with aiofiles.open(CONFIG_FILE, "w", encoding="utf-8") as f:
            await f.write(json.dumps(config, indent=4))
    except Exception as e:
        raise

async def load_config():
    try:
        async with aiofiles.open(CONFIG_FILE, "r", encoding="utf-8") as f:
            data = json.loads(await f.read())
            if "hash_string" not in data:
                data["hash_string"] = []
            return data
    except FileNotFoundError:
        return {"hash_string": []}
    except Exception as e:
        raise

async def save_md5(md5_hash, config_lock):
    async with config_lock:
        try:
            config = await load_config()
            if "hash_string" not in config:
                config["hash_string"] = []
            if md5_hash not in config["hash_string"]:
                config["hash_string"].append(md5_hash)
                async with aiofiles.open(CONFIG_FILE, "w", encoding="utf-8") as f:
                    await f.write(json.dumps(config, indent=4))
        except Exception as e:
            raise

async def is_md5_uploaded(md5_hash, config_lock):
    async with config_lock:
        try:
            config = await load_config()
            return md5_hash in config.get("hash_string", [])
        except Exception as e:
            raise

class UploadWorker:
    def __init__(self, bot_token, user_id, log_callback):
        request = HTTPXRequest(
            connection_pool_size=8,
            pool_timeout=120.0
        )
        self.bot = Bot(token=bot_token, request=request)
        self.user_id = user_id
        self.log_callback = log_callback
        self.config_lock = asyncio.Lock()

    async def close(self):
        print("ƒê√£ ƒë√≥ng UploadWorker")

    async def upload_file(self, file_path, max_retries=2, chunk_size=1024 * 1024):
        file_md5 = calculate_md5(file_path)
        if not file_md5:
            return f"‚ùå Kh√¥ng th·ªÉ t√≠nh MD5: {file_path.name}"

        if await is_md5_uploaded(file_md5, self.config_lock):
            return f"‚ö° B·ªè qua: {file_path.name} (ƒë√£ t·∫£i tr∆∞·ªõc ƒë√≥)"

        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        file_size = os.path.getsize(file_path)
        if file_size > 4 * 1024 * 1024 * 1024:  # 4GB
            return f"‚ùå File qu√° l·ªõn: {file_path.name} ({file_size / 1024 / 1024:.2f}MB)"

        for attempt in range(max_retries):
            try:
                async with aiofiles.open(file_path, 'rb') as f:
                    # T·∫°o m·ªôt BytesIO object ƒë·ªÉ ch·ª©a to√†n b·ªô file
                    file_content = io.BytesIO()
                    
                    # ƒê·ªçc file theo chunk v√† ghi v√†o BytesIO object
                    while True:
                        chunk = await f.read(chunk_size)
                        if not chunk:
                            break
                        file_content.write(chunk)
                    
                    # ƒê∆∞a con tr·ªè v·ªÅ ƒë·∫ßu file ƒë·ªÉ chu·∫©n b·ªã g·ª≠i
                    file_content.seek(0)
                    file_content.name = file_path.name  # ƒê·∫∑t t√™n file

                    await self.bot.send_document(
                        chat_id=self.user_id,
                        document=file_content
                    )

                await save_md5(file_md5, self.config_lock)
                return f"‚úÖ ƒê√£ t·∫£i l√™n: {file_path.name}"
            except TelegramError as e:
                error_str = str(e)
                if "Flood control exceeded" in error_str:
                    import re
                    m = re.search(r"Retry in (\d+) seconds", error_str)
                    if m:
                        wait_seconds = int(m.group(1))
                        self.log_callback(f"‚ö†Ô∏è Flood control: t·∫°m d·ª´ng {wait_seconds} gi√¢y...")
                        await asyncio.sleep(wait_seconds)
                        continue
                elif "Too Many Requests" in str(e):  # Ki·ªÉm tra l·ªói 429
                    wait_time = 5  # Ch·ªù 5 gi√¢y
                    self.log_callback(f"‚ö†Ô∏è Qu√° nhi·ªÅu y√™u c·∫ßu, ch·ªù {wait_time} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                    await asyncio.sleep(wait_time)
                    continue  # Th·ª≠ l·∫°i
                elif isinstance(e, TimedOut):
                    if attempt < max_retries - 1:
                        self.log_callback(f"‚ö†Ô∏è Timed out, th·ª≠ l·∫°i l·∫ßn {attempt + 2}")
                        await asyncio.sleep(5)
                        continue
                    return f"‚ùå L·ªói khi t·∫£i {file_path.name}: {e}"
                else:
                    # X·ª≠ l√Ω c√°c l·ªói kh√°c c·ªßa Telegram
                    self.log_callback(f"‚ùå L·ªói Telegram: {e}")
                    break
            except NetworkError as e:
                if "Request Entity Too Large" in str(e):
                    return f"‚ùå File qu√° l·ªõn: {file_path.name}"
                if attempt < max_retries - 1:
                    self.log_callback(f"‚ö†Ô∏è L·ªói m·∫°ng, th·ª≠ l·∫°i l·∫ßn {attempt + 2}: {str(e)}")
                    await asyncio.sleep(2)
                    continue
                return f"‚ùå L·ªói m·∫°ng khi t·∫£i {file_path.name}: {e}"
            except Exception as e:
                # X·ª≠ l√Ω l·ªói chung
                self.log_callback(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
                break
        else:
            # N·∫øu h·∫øt s·ªë l·∫ßn th·ª≠ m√† v·∫´n th·∫•t b·∫°i
            return f"‚ùå Th·∫•t b·∫°i sau {max_retries} l·∫ßn th·ª≠: {file_path.name}"
        return f"‚úÖ T·∫£i l√™n th√†nh c√¥ng: {file_path.name}"

class UploadThread(QThread):
    progress = pyqtSignal(int)
    log = pyqtSignal(str)
    finished_signal = pyqtSignal()

    def __init__(self, bot_token, directory, user_id, max_workers, async_executor):
        super().__init__()
        self.bot_token = bot_token
        self.directory = Path(directory).resolve()
        self.user_id = user_id
        self.max_workers = min(max_workers, 8)
        self.running = True
        self.async_executor = async_executor
        self.semaphore = None
        self.worker = UploadWorker(self.bot_token, self.user_id, self.log.emit)

    def stop(self):
        self.running = False

    def run(self):
        try:
            self.async_executor.run_async(self.upload_files())
        except Exception as e:
            self.log.emit(f"‚ùå L·ªói: {str(e)}")
        finally:
            self.async_executor.run_async(self.worker.close())
        self.finished_signal.emit()

    async def upload_files(self):
        self.semaphore = asyncio.Semaphore(self.max_workers)
        files = [file_path for file_path in self.directory.rglob("*") if file_path.is_file()]
        total_files = len(files)
        self.log.emit(f"üîé T·ªïng s·ªë t·ªáp c·∫ßn t·∫£i l√™n: {total_files}")
        if total_files == 0:
            self.log.emit("üöÄ Kh√¥ng c√≥ t·ªáp n√†o c·∫ßn t·∫£i l√™n.")
            return

        batch_size = 100
        uploaded_count = 0

        for i in range(0, total_files, batch_size):
            if not self.running:
                self.log.emit("üî• T·∫£i l√™n ƒë√£ b·ªã d·ª´ng.")
                break
            batch = files[i:i + batch_size]
            tasks = [self.process_file(file_path) for file_path in batch]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            for result in results:
                if isinstance(result, str):
                    uploaded_count += 1
                    # Emit progress less frequently to reduce GUI load
                    if uploaded_count % 10 == 0 or uploaded_count == total_files:
                        self.progress.emit(int((uploaded_count / total_files) * 100))
                    self.log.emit(result)
                elif isinstance(result, Exception):
                    self.log.emit(f"‚ùå L·ªói trong batch: {str(result)}")
            if i % (batch_size * 10) == 0:  # G·ªçi gc sau m·ªói 10 batch
                gc.collect()

    async def process_file(self, file_path):
        async with self.semaphore:
            if not self.running:
                return None
            return await self.worker.upload_file(file_path, chunk_size=1024 * 1024)

class MainWidget(QWidget):
    def __init__(self, async_executor):
        super().__init__()
        self.async_executor = async_executor
        self.init_ui()
        self.config = self.async_executor.run_async(load_config())
        self.input_token.setText(self.config.get("token", ""))
        self.input_user_id.setText(self.config.get("user_id", ""))
        self.selected_directory = self.config.get("selected_directory", "")
        if self.selected_directory:
            self.label.setText(f"Th∆∞ m·ª•c ƒë√£ ch·ªçn: {self.selected_directory}")
        self.thread_count.setValue(self.config.get("thread_count", 4))
        self.upload_thread = None

    def init_ui(self):
        layout = QVBoxLayout()

        self.label_token = QLabel("Nh·∫≠p Telegram Bot Token:")
        layout.addWidget(self.label_token)
        self.input_token = QLineEdit()
        layout.addWidget(self.input_token)

        self.label_user_id = QLabel("Nh·∫≠p Telegram User ID:")
        layout.addWidget(self.label_user_id)
        self.input_user_id = QLineEdit()
        layout.addWidget(self.input_user_id)

        self.label = QLabel("Ch·ªçn th∆∞ m·ª•c ch·ª©a t·ªáp c·∫ßn t·∫£i l√™n:")
        layout.addWidget(self.label)

        self.select_button = QPushButton("Ch·ªçn th∆∞ m·ª•c")
        self.select_button.clicked.connect(self.select_directory)
        layout.addWidget(self.select_button)

        self.thread_label = QLabel("S·ªë lu·ªìng t·∫£i l√™n ƒë·ªìng th·ªùi (1-8):")
        layout.addWidget(self.thread_label)
        self.thread_count = QSpinBox()
        self.thread_count.setRange(1, 8)
        self.thread_count.setValue(4)
        self.thread_count.valueChanged.connect(self.update_thread_count)
        layout.addWidget(self.thread_count)

        self.upload_button = QPushButton("T·∫£i l√™n Telegram")
        self.upload_button.clicked.connect(self.start_upload)
        layout.addWidget(self.upload_button)

        self.stop_button = QPushButton("D·ª´ng t·∫£i l√™n")
        self.stop_button.clicked.connect(self.stop_upload)
        self.stop_button.setEnabled(False)
        layout.addWidget(self.stop_button)

        self.reset_button = QPushButton("X√≥a l·ªãch s·ª≠ MD5")
        self.reset_button.clicked.connect(self.reset_md5_history)
        layout.addWidget(self.reset_button)

        self.progress_bar = QProgressBar()
        layout.addWidget(self.progress_bar)

        self.log_display = QTextEdit()
        self.log_display.setReadOnly(True)
        layout.addWidget(self.log_display)

        self.setLayout(layout)

    def update_thread_count(self):
        token = self.input_token.text().strip()
        user_id = self.input_user_id.text().strip()
        self.async_executor.run_async(save_config(token, user_id, self.selected_directory, self.thread_count.value()))

    def select_directory(self):
        directory = QFileDialog.getExistingDirectory(self, "Ch·ªçn th∆∞ m·ª•c")
        if directory:
            self.selected_directory = directory
            self.label.setText(f"Th∆∞ m·ª•c ƒë√£ ch·ªçn: {directory}")
            self.async_executor.run_async(save_config(self.input_token.text().strip(), self.input_user_id.text().strip(), directory))

    def start_upload(self):
        self.upload_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.log_display.append("B·∫Øt ƒë·∫ßu. ƒêang t√≠nh s·ªë l∆∞·ª£ng t·∫≠p tin...")

        token = self.input_token.text().strip()
        user_id = self.input_user_id.text().strip()
        max_workers = self.thread_count.value()

        if not token or not user_id:
            self.log_display.append("Vui l√≤ng nh·∫≠p Token v√† User ID!")
            self.upload_button.setEnabled(True)
            self.stop_button.setEnabled(False)
            return

        if not self.selected_directory:
            self.selected_directory = self.config.get("selected_directory", "")
            if not self.selected_directory:
                self.log_display.append("Vui l√≤ng ch·ªçn th∆∞ m·ª•c tr∆∞·ªõc!")
                self.upload_button.setEnabled(True)
                self.stop_button.setEnabled(False)
                return

        self.async_executor.run_async(save_config(token, user_id))
        self.upload_thread = UploadThread(token, self.selected_directory, user_id, max_workers, self.async_executor)
        self.upload_thread.progress.connect(self.progress_bar.setValue)
        self.upload_thread.log.connect(self.append_limited_log)
        self.upload_thread.finished_signal.connect(self.upload_finished)
        self.upload_thread.start()

    def stop_upload(self):
        if self.upload_thread and self.upload_thread.isRunning():
            self.upload_thread.stop()
            self.upload_button.setEnabled(True)
            self.stop_button.setEnabled(False)

    def upload_finished(self):
        self.upload_button.setEnabled(True)
        self.stop_button.setEnabled(False)
        self.log_display.append("üöÄ Qu√° tr√¨nh t·∫£i l√™n ƒë√£ ho√†n th√†nh.")

    def reset_md5_history(self):
        self.async_executor.run_async(self._reset_md5_history_async())
        self.log_display.append("üóëÔ∏è ƒê√£ reset l·ªãch s·ª≠ MD5.")

    async def _reset_md5_history_async(self):
        try:
            config = await load_config()
            config["hash_string"] = []
            async with aiofiles.open(CONFIG_FILE, "w", encoding="utf-8") as f:
                await f.write(json.dumps(config, indent=4))
        except Exception as e:
            raise

    def append_limited_log(self, message):
        document = self.log_display.document()
        if document.blockCount() > 1000:
            self.log_display.clear()
        self.log_display.append(message)

class AboutWidget(QWidget):
    def __init__(self):
        super().__init__()
        layout = QVBoxLayout()

        info = {
            "T√™n ph·∫ßn m·ªÅm": "Upload Telegram Multithread",
            "T√°c gi·∫£": "TekDT",
            "M√¥ t·∫£": "Ph·∫ßn m·ªÅm t·∫£i l√™n t·ªáp l√™n Telegram v·ªõi h·ªó tr·ª£ ƒëa lu·ªìng",
            "Ng√†y ph√°t h√†nh": released_date,
            "Phi√™n b·∫£n": version,
            "Email": "dinhtrungtek@gmail.com",
            "Telegram": "@tekdt1152",
            "Facebook": "tekdtcom"
        }

        for key, value in info.items():
            label = QLabel(f"{key}: {value}")
            layout.addWidget(label)

        self.setLayout(layout)

class TelegramUploader(QTabWidget):
    def __init__(self):
        super().__init__()
        self.async_executor = AsyncExecutor()
        self.main_tab = MainWidget(self.async_executor)
        self.about_tab = AboutWidget()
        self.addTab(self.main_tab, "Main")
        self.addTab(self.about_tab, "About")
        self.setWindowTitle("Upload Telegram Multithread")
        self.resize(500, 550)

    def closeEvent(self, event):
        self.async_executor.shutdown()
        event.accept()

if __name__ == "__main__":
    app = QApplication([])
    if hasattr(sys, "_MEIPASS"):
        icon_path = os.path.join(sys._MEIPASS, "logo.ico")
    else:
        icon_path = "logo.ico"

    app.setWindowIcon(QIcon(icon_path))
    window = TelegramUploader()
    window.setWindowIcon(QIcon(icon_path))
    window.show()
    sys.exit(app.exec())
